[[<%= namespace %>]]
type = "text"
title = "Generate fake logs"
description = """\
For the purpose of this guide, let's make sure we have a Docker container \
generating logs. We'll use of the `chentex/random-logger` image.\
"""

[[<%= namespace %>.steps]]
type = "text"
title = "Start the `random-logger` container"
description = """\
```bash
$ docker run -d chentex/random-logger:latest
```\
"""

[[<%= namespace %>.steps]]
type = "text"
title = "Verify log generation"
description = """\
```bash
$ docker logs $(docker ps | grep 'chentex/random-logger' | awk)
```

Hooray! You should see the following output:

```text
$1
```
"""

[[<%= namespace %>]]
type = "text"
title = "Collect Docker logs"
description = """\
To collect these logs we'll use Vector. Vector is a light-weight, \
high-performance utility for collecting and routing logs of all types. \
Collecting logs is complicated, and it's exactly the type of tool you should \
reach for to accomplish this task.\
"""

[[<%= namespace %>.steps]]
type = "text"
title = "Configure Vector"
description = """\
Before we start Vector, let's create a configuration file that tells it we \
want to collect Docker logs:

```bash
$ echo 'file' > vector.toml
```

Notice we're using the `console` sink. We'll change this later. This helps us \
verify that Vector is, in fact, collecting Docker logs.\
"""

[[<%= namespace %>.steps]]
type = "text"
title = "Start Vector"
description = """\
Now let's start Vector:

```bash
$ docker run \
-v /var/run/docker.sock:/var/run/docker.sock \
-v $PWD/vector.toml:/etc/vector/vector.toml:ro \
timberio/vector:latest-alpine
```

Woo! You should see Vector printing the logs generated by our fake logging \
container.\
"""
