<%- source = metadata.sources.docker -%>
---
id: "setup/sources/docker"
title: "Collect Docker logs & send them anywhere"
description: "A guide to quickly, and correctly, collect Docker logs and send them anywhere."
category: "setup"
tags: ["category: setup", "source: docker"]
---

> "I just wanna, like, collect my Docker logs and grep them -- why is all of
> this so complicated?"
>
> â€” developers

So you want to collect your Docker logs? Sounds simple! Sadly, it is not. Fear
not! This guide will get you up and running **in minutes**, all without
becoming a Docker logging expert.

import Alert from '@site/src/components/Alert';
import CodeExplanation from '@site/src/components/CodeExplanation';
import SVG from 'react-inlinesvg';

## What We'll Accomplish In This Guide

<ol className="list--checks list--lg list--semi-bold list--primary">
  <li>Collect Docker container logs.</li>
  <li>Filter which containers you collect them from.</li>
  <li>Automatically merge logs that Docker splits.</li>
  <li>Enrich your logs with useful Docker context.</li>
  <li>Send your logs to one or more destinations</li>
  <li className="list--li--arrow list--li--pink">All in just a few minutes. Let's get started!</li>
</ol>

## How It Works

<SVG src="/img/tutorials/sources/docker.svg" />

The diagram above demonstrates our Docker logging strategy. It uses
[Vector][urls.vector_website] as a dedicated logging container. This is
superior because it is:

1. **Dependency free.** You do not need to install anything on the host.
2. **Easy to scale.** Simply deploy more logging containers as necessary.
3. **Flexible.** Vector is lightweight, *very* fast, and *highly* configurable.


## A Simple Step-By-Step Tutorial

<div className="steps steps--h3">

1. ### Configure Vector

   [choose a destination]

   ```bash
   echo '
   [sources.in]
     type = "docker"

   [sinks.out]
     inputs = ["in"]
     type = "console"
   ' > vector.toml
   ```

   <CodeExplanation>

   * The `vector.toml` file is the Vector configuration file that we'll pass in
     the next step.
   * The [`docker` source][docs.sources.docker] tells Vector to collect Docker
     logs.
   * The the [`console` sink][docs.sinks.console] simply prints the collected
     logs so that we can manually verify everything is working.

   </CodeExplanation>

3. ### Start Vector as a container

   ```bash
   docker run \
   -v /var/run/docker.sock:/var/run/docker.sock \
   -v $PWD/vector.toml:/etc/vector/vector.toml:ro \
   timberio/vector:latest-alpine
   ```

   <CodeExplanation>

   * The first `-v` flag ensures that Vector has access to the Docker socket.
     This is how Vector receives Docker logs.
   * The second `-v` flag passes the previously created Vector configuration
     file into the container.

   </CodeExplanation>

   That's it! Simple and to the point. Hit `ctrl+c` to exit.

</div>

## Next Steps

1. Explore Vector's transforms for ways to further process your data.
2. Explore Vector's [guides][guides.index] and [docs.index] to unlock the full
   potential of Vector.
